-- CÓDIGO GENERADOR DE LOS PROCEDIMIENTOS ALMACENADOS

/*
    * EN ESTE DOCUMENTO SE UTILIZA PARA GENERAR LOS PROCEDIMIENTOS ALMACENADOS DENTRO DE LA BASE DE DATOS.
    * ESTE SE ENCUENTRA ORDENADO SEGÚN LOS MÓDULOS USUARIO, PING, RELACIONES, EVENTO, MENSAJE, JUEGO.
    * DENTRO DE ESTE DOCUMENTO SE ENCONTRARÁ LA LISTA DE ERRORES CONTROLADOS EN LA BASE DE DATOS.
    * PARA EJECUTAR ESTE CODIGO, COPIA TODOS LOS PROCEDIMIENTOS Y EJECUTALOS EN EL ADMINISTRADOR DE SQL SERVER.
*/


-- MODULO 1: USUARIO


-- SP001: INSERTAR USUARIO (PACIENTE O CUIDADOR)
CREATE OR ALTER PROCEDURE SP_INSERTAR_USUARIO
    @NOMBRE VARCHAR(100),
    @CORREO_ELECTRONICO NVARCHAR(255),
    @CONTRASENA NVARCHAR(255),
    @FECHA_NACIMIENTO DATE,
    @FOTO_PERFIL VARBINARY(MAX) = NULL,
    @DIRECCION VARCHAR(255) = NULL,
    @ID_TIPO_USUARIO INT,
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    DECLARE @CODIGO VARCHAR(6) = NULL;
    DECLARE @EXISTE INT;
    DECLARE @ID_USUARIO INT;
    
    BEGIN TRY
        BEGIN TRANSACTION;

        IF EXISTS (SELECT 1 FROM [dbo].[USUARIO] WHERE [CORREO_ELECTRONICO] = @CORREO_ELECTRONICO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50001;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF @ID_TIPO_USUARIO = 1
        BEGIN
            WHILE 1 = 1
            BEGIN
                SET @EXISTE = 0;
                SET @CODIGO = LEFT(NEWID(), 6);
                SELECT @EXISTE = COUNT(*) FROM USUARIO WHERE CODIGO = @CODIGO;
                IF @EXISTE = 0 BREAK;
            END
        END

        INSERT INTO USUARIO (NOMBRE, CORREO_ELECTRONICO, CONTRASENA, FECHA_NACIMIENTO, FOTO_PERFIL, CODIGO, DIRECCION, ID_TIPO_USUARIO)
        VALUES (@NOMBRE, @CORREO_ELECTRONICO, @CONTRASENA, @FECHA_NACIMIENTO, @FOTO_PERFIL, @CODIGO, @DIRECCION, @ID_TIPO_USUARIO);

        SET @ID_RETURN = SCOPE_IDENTITY();

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP002: ACTUALIZAR FOTO DE PERFIL
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_FOTO_PERFIL
    @ID_USUARIO INT,
    @FOTO_PERFIL VARBINARY(MAX),
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM [dbo].[USUARIO] WHERE [ID_USUARIO] = @ID_USUARIO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50002;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE USUARIO
        SET FOTO_PERFIL = @FOTO_PERFIL
        WHERE ID_USUARIO = @ID_USUARIO;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP003: ACTUALIZAR USUARIO 
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_USUARIO
    @ID_USUARIO INT,
    @NOMBRE VARCHAR(100),
    @FECHA_NACIMIENTO DATE,
    @DIRECCION VARCHAR(255),
    @PIN VARCHAR(6) = NULL,
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    DECLARE @ID_TIPO_USUARIO INT;
    DECLARE @PIN_CORRECTO INT;

    BEGIN TRY
        BEGIN TRANSACTION;

        SELECT @ID_TIPO_USUARIO = ID_TIPO_USUARIO FROM USUARIO WHERE ID_USUARIO = @ID_USUARIO;

        IF @ID_TIPO_USUARIO IS NULL
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50002;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF EXISTS(SELECT 1 FROM [dbo].[PING] WHERE [ID_USUARIO] = @ID_USUARIO AND [ESTADO] = 1) AND @ID_TIPO_USUARIO = 1 
        BEGIN
            SELECT @PIN_CORRECTO = COUNT(*) FROM PING WHERE ID_USUARIO = @ID_USUARIO AND CODIGO = @PIN AND ESTADO = 1;
            IF @PIN_CORRECTO = 0
            BEGIN
                SELECT @ERROR_ID = NUM_ERROR, 
                       @ERROR_CODE = CODE_ERROR, 
                       @ERROR_DESCRIPTION = DESCRIPTION_ERROR
                FROM ERROR_CATALOG 
                WHERE NUM_ERROR = 50018;

                ROLLBACK TRANSACTION;
                RETURN;
            END
        END

        UPDATE USUARIO
        SET NOMBRE = @NOMBRE,
            FECHA_NACIMIENTO = @FECHA_NACIMIENTO,
            DIRECCION = @DIRECCION
        WHERE ID_USUARIO = @ID_USUARIO;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP004: ACTUALIZAR CONTRASEÑA
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_CONTRASENA
    @ID_USUARIO INT,
    @CONTRASENA_ACTUAL VARCHAR(255),
    @NUEVA_CONTRASENA VARCHAR(255),
    @PIN VARCHAR(6) = NULL,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
        DECLARE @PIN_CORRECTO INT;

        IF NOT EXISTS (SELECT 1 FROM [dbo].[USUARIO] WHERE @ID_USUARIO = [ID_USUARIO])
        BEGIN 
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50002;

            ROLLBACK TRANSACTION;
            RETURN; 
        END

        IF EXISTS (SELECT 1 FROM [dbo].[PING] WHERE [ID_USUARIO] = @ID_USUARIO AND [ESTADO] = 1) 
        BEGIN
            SELECT @PIN_CORRECTO = COUNT(*) FROM PING WHERE ID_USUARIO = @ID_USUARIO AND CODIGO = @PIN AND ESTADO = 1;
            IF @PIN_CORRECTO = 0
            BEGIN
                SELECT @ERROR_ID = NUM_ERROR, 
                       @ERROR_CODE = CODE_ERROR, 
                       @ERROR_DESCRIPTION = DESCRIPTION_ERROR
                FROM ERROR_CATALOG 
                WHERE NUM_ERROR = 50018;

                ROLLBACK TRANSACTION;
                RETURN;
            END
        END

        IF NOT EXISTS (SELECT 1 FROM [dbo].[USUARIO] WHERE [CONTRASENA] = @CONTRASENA_ACTUAL AND [ID_USUARIO] = @ID_USUARIO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50019;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF EXISTS (SELECT 1 FROM [dbo].[USUARIO] WHERE [CONTRASENA] = @NUEVA_CONTRASENA AND [ID_USUARIO] = @ID_USUARIO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50020;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE USUARIO
        SET CONTRASENA = @NUEVA_CONTRASENA
        WHERE ID_USUARIO = @ID_USUARIO;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP005: ELIMINAR FOTO DE PERFIL (VERIFICA PING EN CASO DE SER REQUERIDO)
CREATE OR ALTER PROCEDURE SP_ELIMINAR_FOTO_PERFIL
    @ID_USUARIO INT,
    @CODIGO_PING VARCHAR(6) = NULL,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_USUARIO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50002;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF EXISTS (SELECT 1 FROM [dbo].[PING] WHERE [ID_USUARIO] = @ID_USUARIO AND [ESTADO] = 1)
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM [dbo].[PING] WHERE [ID_USUARIO] = @ID_USUARIO AND [CODIGO] = @CODIGO_PING)
            BEGIN
                SELECT @ERROR_ID = NUM_ERROR, 
                       @ERROR_CODE = CODE_ERROR, 
                       @ERROR_DESCRIPTION = DESCRIPTION_ERROR
                FROM ERROR_CATALOG 
                WHERE NUM_ERROR = 50018;

                ROLLBACK TRANSACTION;
                RETURN;
            END
        END

        UPDATE USUARIO
        SET FOTO_PERFIL = NULL
        WHERE ID_USUARIO = @ID_USUARIO;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO



-- MODULO 2: PING


-- SP006: INSERTAR PING (USUARIO PACIENTE)
CREATE OR ALTER PROCEDURE SP_INSERTAR_PING
    @ID_USUARIO INT,
    @CODIGO VARCHAR(6),
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
        
        IF NOT EXISTS (SELECT 1 FROM [dbo].[USUARIO] WHERE [ID_USUARIO] = @ID_USUARIO AND ID_TIPO_USUARIO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50002;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF EXISTS (SELECT 1 FROM PING WHERE ID_USUARIO = @ID_USUARIO AND ESTADO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50007;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF @CODIGO IS NULL OR LEN(@CODIGO) <> 6 OR @CODIGO LIKE '%[^0-9]%'
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50017;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END
        
        INSERT INTO PING (CODIGO, FECHA, ESTADO, ID_USUARIO)
        VALUES (@CODIGO, GETDATE(), 1, @ID_USUARIO);
        
        SET @ID_RETURN = SCOPE_IDENTITY();
        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP007: ACTUALIZAR PING (USUARIO PACIENTE)
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_PING
    @ID_USUARIO INT,
    @PIN_ACTUAL VARCHAR(6),
    @NUEVO_CODIGO VARCHAR(6),
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS(SELECT 1 FROM [dbo].[PING] WHERE ID_USUARIO = @ID_USUARIO AND CODIGO = @PIN_ACTUAL AND ESTADO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50018;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF @NUEVO_CODIGO IS NULL OR LEN(@NUEVO_CODIGO) <> 6 OR @NUEVO_CODIGO LIKE '%[^0-9]%'
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50017;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE PING 
        SET ESTADO = 0
        WHERE ID_USUARIO = @ID_USUARIO AND CODIGO = @PIN_ACTUAL AND ESTADO = 1;

        INSERT INTO PING (CODIGO, FECHA, ESTADO, ID_USUARIO)
        VALUES (@NUEVO_CODIGO, GETDATE(), 1, @ID_USUARIO);

        SET @ID_RETURN = SCOPE_IDENTITY();
        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP008: ELIMINAR PING (CAMBIAR ESTADO A FALSE/0)
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PING
    @ID_USUARIO INT,
    @CODIGO_PING VARCHAR(6),
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_USUARIO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50002;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM PING WHERE ID_USUARIO = @ID_USUARIO AND ESTADO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50016;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM PING WHERE ID_USUARIO = @ID_USUARIO AND CODIGO = @CODIGO_PING AND ESTADO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50018;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE PING
        SET ESTADO = 0
        WHERE ID_USUARIO = @ID_USUARIO AND CODIGO = @CODIGO_PING AND ESTADO = 1;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- MODULO 3: RELACIONES


-- SP009: INSERTAR RELACION (CUIDADOR PACIENTE)
CREATE OR ALTER PROCEDURE SP_INSERTAR_RELACION
    @ID_USUARIO_CUIDADOR INT,
    @CODIGO_PACIENTE VARCHAR(6),
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        DECLARE @ID_USUARIO_PACIENTE INT;

        SELECT @ID_USUARIO_PACIENTE = ID_USUARIO FROM USUARIO WHERE CODIGO = @CODIGO_PACIENTE AND ID_TIPO_USUARIO = 1;

        IF @ID_USUARIO_PACIENTE IS NULL
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50009;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_USUARIO_CUIDADOR AND ID_TIPO_USUARIO = 2)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50004;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF EXISTS (SELECT 1 FROM CUIDADOR_PACIENTE WHERE ID_USUARIO_PACIENTE = @ID_USUARIO_PACIENTE AND ID_USUARIO_CUIDADOR = @ID_USUARIO_CUIDADOR AND FEC_FIN IS NULL)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50011;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO CUIDADOR_PACIENTE (ID_USUARIO_CUIDADOR, ID_USUARIO_PACIENTE, FEC_INICIO)
        VALUES (@ID_USUARIO_CUIDADOR, @ID_USUARIO_PACIENTE, GETDATE());

        SET @ID_RETURN = SCOPE_IDENTITY();
        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP:010: OBTENER RELACION (CUIDADOR PACIENTE)
CREATE OR ALTER PROCEDURE SP_OBTENER_RELACION
    @ID_CUIDADOR INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_CUIDADOR AND ID_TIPO_USUARIO = 2)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50004;

            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM CUIDADOR_PACIENTE WHERE ID_USUARIO_CUIDADOR = @ID_CUIDADOR AND FEC_FIN IS NULL)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50005;

            RETURN;
        END

        SELECT 
            U.ID_USUARIO AS ID_PACIENTE,
            U.NOMBRE,
            U.FECHA_NACIMIENTO
        FROM CUIDADOR_PACIENTE CP
        INNER JOIN USUARIO U ON CP.ID_USUARIO_PACIENTE = U.ID_USUARIO
        WHERE CP.ID_USUARIO_CUIDADOR = @ID_CUIDADOR;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP011: ELIMINAR RELACION (CUIDADOR PACIENTE)
CREATE OR ALTER PROCEDURE SP_ELIMINAR_RELACION
    @ID_USUARIO_CUIDADOR INT,
    @ID_USUARIO_PACIENTE INT,
    @CODIGO_PING VARCHAR(6) = NULL,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_USUARIO_PACIENTE AND ID_TIPO_USUARIO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50003;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_USUARIO_CUIDADOR)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50004;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM CUIDADOR_PACIENTE WHERE ID_USUARIO_CUIDADOR = @ID_USUARIO_CUIDADOR AND ID_USUARIO_PACIENTE = @ID_USUARIO_PACIENTE AND FEC_FIN IS NULL)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50010;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF @CODIGO_PING IS NOT NULL AND EXISTS (SELECT 1 FROM PING WHERE ID_USUARIO = @ID_USUARIO_PACIENTE AND ESTADO = 1)
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM PING WHERE ID_USUARIO = @ID_USUARIO_PACIENTE AND CODIGO = @CODIGO_PING AND ESTADO = 1)
            BEGIN
                SELECT @ERROR_ID = NUM_ERROR, 
                       @ERROR_CODE = CODE_ERROR, 
                       @ERROR_DESCRIPTION = DESCRIPTION_ERROR
                FROM ERROR_CATALOG 
                WHERE NUM_ERROR = 50018;

                ROLLBACK TRANSACTION;
                RETURN;
            END
        END

        UPDATE CUIDADOR_PACIENTE
        SET FEC_FIN = GETDATE()
        WHERE ID_USUARIO_CUIDADOR = @ID_USUARIO_CUIDADOR 
        AND ID_USUARIO_PACIENTE = @ID_USUARIO_PACIENTE 
        AND FEC_FIN IS NULL;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO



-- MODULO 4: EVENTO


-- SP012: INSERTAR EVENTO
CREATE OR ALTER PROCEDURE SP_INSERTAR_EVENTO
    @ID_CUIDADOR INT,
    @TITULO VARCHAR(255),
    @DESCRIPCION VARCHAR(255) = NULL,
    @FECHA_HORA DATETIME,
    @ID_PRIORIDAD INT,
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_CUIDADOR AND ID_TIPO_USUARIO = 2)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50004;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM PRIORIDAD WHERE ID_PRIORIDAD = @ID_PRIORIDAD)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50024;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO EVENTO (TITULO, DESCRIPCION, FECHA_HORA, ID_PRIORIDAD, ID_USUARIO)
        VALUES (@TITULO, @DESCRIPCION, @FECHA_HORA, @ID_PRIORIDAD, @ID_CUIDADOR);

        SET @ID_RETURN = SCOPE_IDENTITY();
        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP013: ACTUALIZAR EVENTO
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_EVENTO
    @ID_EVENTO INT,
    @ID_CUIDADOR INT,
    @TITULO VARCHAR(255),
    @DESCRIPCION VARCHAR(255) = NULL,
    @FECHA_HORA DATETIME,
    @ID_PRIORIDAD INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM EVENTO WHERE ID_EVENTO = @ID_EVENTO AND ID_USUARIO = @ID_CUIDADOR)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50015;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM PRIORIDAD WHERE ID_PRIORIDAD = @ID_PRIORIDAD)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50024;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE EVENTO
        SET TITULO = @TITULO, 
            DESCRIPCION = @DESCRIPCION, 
            FECHA_HORA = @FECHA_HORA, 
            ID_PRIORIDAD = @ID_PRIORIDAD
        WHERE ID_EVENTO = @ID_EVENTO;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP014: ELIMINAR EVENTO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_EVENTO
    @ID_EVENTO INT,
    @ID_CUIDADOR INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM EVENTO WHERE ID_EVENTO = @ID_EVENTO AND ID_USUARIO = @ID_CUIDADOR)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50015;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        DELETE FROM EVENTO_USUARIO 
        WHERE ID_EVENTO = @ID_EVENTO;

        DELETE FROM EVENTO 
        WHERE ID_EVENTO = @ID_EVENTO;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP015: INSERTAR PACIENTE A EVENTO
CREATE OR ALTER PROCEDURE SP_INSERTAR_PACIENTE_EVENTO
    @ID_EVENTO INT,
    @ID_CUIDADOR INT,
    @ID_PACIENTE INT,
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM EVENTO WHERE ID_EVENTO = @ID_EVENTO AND ID_USUARIO = @ID_CUIDADOR)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50015;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_PACIENTE AND ID_TIPO_USUARIO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50003;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO EVENTO_USUARIO (ID_EVENTO, ID_USUARIO, ID_ESTADO)
        VALUES (@ID_EVENTO, @ID_PACIENTE, 1);

        SET @ID_RETURN = SCOPE_IDENTITY();
        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP016: ELIMINAR PACIENTE DE EVENTO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PACIENTE_EVENTO
    @ID_EVENTO INT,
    @ID_CUIDADOR INT,
    @ID_PACIENTE INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM EVENTO WHERE ID_EVENTO = @ID_EVENTO AND ID_USUARIO = @ID_CUIDADOR)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50015;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM EVENTO_USUARIO WHERE ID_EVENTO = @ID_EVENTO AND ID_USUARIO = @ID_PACIENTE)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50006;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        DELETE FROM EVENTO_USUARIO
        WHERE ID_EVENTO = @ID_EVENTO 
        AND ID_USUARIO = @ID_PACIENTE;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP017: OBTENER EVENTOS DE PACIENTE
CREATE OR ALTER PROCEDURE SP_OBTENER_EVENTOS_PACIENTE
    @ID_PACIENTE INT,
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_PACIENTE AND ID_TIPO_USUARIO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50003;

            SET @ID_RETURN = -1;
            RETURN;
        END

        SELECT 
            E.ID_EVENTO,
            E.TITULO,
            E.DESCRIPCION,
            E.FECHA_HORA,
            P.ID_PRIORIDAD,
            P.DESCRIPCION AS PRIORIDAD,
            U.ID_USUARIO AS ID_CUIDADOR,
            U.NOMBRE AS NOMBRE_CUIDADOR
        FROM EVENTO E
        INNER JOIN PRIORIDAD P ON E.ID_PRIORIDAD = P.ID_PRIORIDAD
        INNER JOIN EVENTO_USUARIO EU ON E.ID_EVENTO = EU.ID_EVENTO
        INNER JOIN USUARIO U ON E.ID_USUARIO = U.ID_USUARIO
        WHERE EU.ID_USUARIO = @ID_PACIENTE;

        SET @ID_RETURN = 1;
        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP018: OBTENER EVENTOS DE CUIDADOR
CREATE OR ALTER PROCEDURE SP_OBTENER_EVENTOS_CUIDADOR
    @ID_CUIDADOR INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_CUIDADOR AND ID_TIPO_USUARIO = 2)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50004;

            RETURN;
        END

        SELECT 
            E.ID_EVENTO,
            E.TITULO,
            E.DESCRIPCION,
            E.FECHA_HORA,
            P.ID_PRIORIDAD,
            P.DESCRIPCION AS PRIORIDAD,
            (
                SELECT U.ID_USUARIO AS ID, U.NOMBRE AS NOMBRE
                FROM EVENTO_USUARIO EU
                INNER JOIN USUARIO U ON EU.ID_USUARIO = U.ID_USUARIO
                WHERE EU.ID_EVENTO = E.ID_EVENTO
                FOR JSON PATH
            ) AS PACIENTES
        FROM EVENTO E
        INNER JOIN PRIORIDAD P ON E.ID_PRIORIDAD = P.ID_PRIORIDAD
        WHERE E.ID_USUARIO = @ID_CUIDADOR;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- MODULO 5: MENSAJE


-- SP019: INSERTAR MENSAJE (ENVIAR MENSAJE DE CUIDADOR A PACIENTE)
CREATE OR ALTER PROCEDURE SP_INSERTAR_MENSAJE
    @ID_CUIDADOR INT,
    @ID_PACIENTE INT,
    @CONTENIDO VARCHAR(255),
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_CUIDADOR AND ID_TIPO_USUARIO = 2)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50004;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END
    
        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_PACIENTE AND ID_TIPO_USUARIO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50003;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM CUIDADOR_PACIENTE WHERE ID_USUARIO_CUIDADOR = @ID_CUIDADOR AND ID_USUARIO_PACIENTE = @ID_PACIENTE)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50010;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO MENSAJE (CONTENIDO, FECHA_ENVIADO, FECHA_RECIBIDO, ID_USUARIO_CUIDADOR, ID_USUARIO_PACIENTE, ID_ESTADO) 
        VALUES (@CONTENIDO, GETDATE(), NULL, @ID_CUIDADOR, @ID_PACIENTE, 1);

        SET @ID_RETURN = SCOPE_IDENTITY();

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO

-- SP020: OBTENER MENSAJES (USUARIO PACIENTE)
CREATE OR ALTER PROCEDURE SP_OBTENER_MENSAJES
    @ID_PACIENTE INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRANSACTION;

    BEGIN TRY
        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_PACIENTE AND ID_TIPO_USUARIO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50003;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE MENSAJE
        SET ID_ESTADO = 2, FECHA_RECIBIDO = GETDATE()
        WHERE ID_USUARIO_PACIENTE = @ID_PACIENTE AND ID_ESTADO = 1;

        SELECT 
            M.ID_MENSAJE,
            M.CONTENIDO,
            M.FECHA_ENVIADO,
            M.ID_USUARIO_CUIDADOR AS ID_CUIDADOR,
            U.NOMBRE AS NOMBRE_CUIDADOR,
            M.ID_ESTADO
        FROM MENSAJE M
        INNER JOIN USUARIO U ON M.ID_USUARIO_CUIDADOR = U.ID_USUARIO
        WHERE M.ID_USUARIO_PACIENTE = @ID_PACIENTE;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
        ROLLBACK TRANSACTION;
    END CATCH
END;
GO


-- SP021: ACTUALIZAR ESTADO DEL MENSAJE (DE RECIBIDO A LEIDO)
CREATE OR ALTER PROCEDURE SP_ACTUALIZAR_ESTADO_MENSAJES
    @ID_PACIENTE INT,
    @ID_MENSAJE INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
        
        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_PACIENTE AND ID_TIPO_USUARIO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50003;

            ROLLBACK TRANSACTION;
            RETURN;
        END
        
        IF NOT EXISTS (SELECT 1 FROM MENSAJE WHERE ID_MENSAJE = @ID_MENSAJE AND ID_USUARIO_PACIENTE = @ID_PACIENTE)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50023;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE MENSAJE
        SET ID_ESTADO = 3
        WHERE ID_USUARIO_PACIENTE = @ID_PACIENTE AND ID_ESTADO = 2 AND ID_MENSAJE = @ID_MENSAJE;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO



-- MODULO 6: JUEGO


-- SP022: INSERTAR JUEGO
CREATE OR ALTER PROCEDURE SP_INSERTAR_JUEGO
    @ID_CUIDADOR INT,
    @NOMBRE VARCHAR(255),
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_CUIDADOR AND ID_TIPO_USUARIO = 2)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50004;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO JUEGO (NOMBRE, ID_USUARIO_CREADOR)
        VALUES (@NOMBRE, @ID_CUIDADOR);

        SET @ID_RETURN = SCOPE_IDENTITY();
        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP023: INSERTAR PREGUNTA (PUEDE INCLUIR IMAGEN)
CREATE OR ALTER PROCEDURE SP_INSERTAR_PREGUNTA
    @ID_JUEGO INT,
    @TITULO VARCHAR(255),
    @DESCRIPCION VARCHAR(MAX),
    @BINARIO_FOTO VARBINARY(MAX),
    @TITULO_IMAGEN VARCHAR(255),
    @ID_USUARIO INT,
    @ID_RETURN INT OUTPUT,
    @ID_RETURN_2 INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM JUEGO WHERE ID_JUEGO = @ID_JUEGO AND ID_USUARIO_CREADOR = @ID_USUARIO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50012;

            SET @ID_RETURN = -1;
            SET @ID_RETURN_2 = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO IMAGEN (BINARIO_FOTO)
        VALUES (@BINARIO_FOTO);

        SET @ID_RETURN = SCOPE_IDENTITY();

        INSERT INTO PREGUNTA (DESCRIPCION, ID_JUEGO, ID_IMAGEN)
        VALUES (@DESCRIPCION, @ID_JUEGO, @ID_RETURN);

        SET @ID_RETURN_2 = SCOPE_IDENTITY();

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ID_RETURN_2 = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP024: INSERTAR OPCION (OPCIÓN CORRECTA O OPCIONES INCORRECTAS)
CREATE OR ALTER PROCEDURE SP_INSERTAR_OPCION
    @ID_PREGUNTA INT,
    @ID_CUIDADOR INT,
    @DESCRIPCION VARCHAR(255),
    @CONDICION BIT, -- 1 = Correcta, 0 = Incorrecta
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM PREGUNTA P INNER JOIN JUEGO J ON J.ID_JUEGO = P.ID_JUEGO WHERE P.ID_PREGUNTA = @ID_PREGUNTA AND J.ID_USUARIO_CREADOR = @ID_CUIDADOR)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50012;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM PREGUNTA WHERE ID_PREGUNTA = @ID_PREGUNTA)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50021;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF @CONDICION = 1 AND EXISTS (SELECT 1 FROM OPCION WHERE ID_PREGUNTA = @ID_PREGUNTA AND CONDICION = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50022;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO OPCION (DESCRIPCION, CONDICION, ID_PREGUNTA)
        VALUES (@DESCRIPCION, @CONDICION, @ID_PREGUNTA);

        SET @ID_RETURN = SCOPE_IDENTITY();
        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO

-- SP025: INSERTAR PACIENTE A UN JUEGO (RELACION QUE LE PERMITE AL PACIENTE DAR USO AL JUEGO)
CREATE OR ALTER PROCEDURE SP_INSERTAR_PACIENTE_JUEGO
    @ID_JUEGO INT,
    @ID_CUIDADOR INT,
    @ID_PACIENTE INT,
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM CUIDADOR_PACIENTE WHERE ID_USUARIO_CUIDADOR = @ID_CUIDADOR AND ID_USUARIO_PACIENTE = @ID_PACIENTE)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50005;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF EXISTS (SELECT 1 FROM JUEGO_PACIENTE WHERE ID_JUEGO = @ID_JUEGO AND ID_PACIENTE = @ID_PACIENTE)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50014;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        INSERT INTO JUEGO_PACIENTE (ID_JUEGO, ID_PACIENTE)
        VALUES (@ID_JUEGO, @ID_PACIENTE);

        SET @ID_RETURN = @ID_JUEGO;
        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO

-- SP026: OBTENER JUEGOS CREADOS (POR USUARIO CUIDADOR)
CREATE OR ALTER PROCEDURE SP_OBTENER_JUEGOS_CREADOS
    @ID_CUIDADOR INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION; 

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_CUIDADOR AND ID_TIPO_USUARIO = 2)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50004;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        SELECT 
            J.ID_JUEGO,
            J.NOMBRE,
            (SELECT COUNT(*) FROM PREGUNTA WHERE ID_JUEGO = J.ID_JUEGO) AS TOTAL_PREGUNTAS
        FROM JUEGO J
        WHERE ID_USUARIO_CREADOR = @ID_CUIDADOR;

        COMMIT TRANSACTION; 

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
        ROLLBACK TRANSACTION;
    END CATCH
END;
GO

-- SP027: OBTENER JUEGOS DISPONIBLES (PARA USUARIO PACIENTE)
CREATE OR ALTER PROCEDURE SP_OBTENER_JUEGOS_DISPONIBLES
    @ID_PACIENTE INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION; 

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_PACIENTE AND ID_TIPO_USUARIO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50003;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        SELECT 
            J.ID_JUEGO,
            J.NOMBRE,
            (SELECT COUNT(*) FROM PREGUNTA WHERE ID_JUEGO = J.ID_JUEGO) AS TOTAL_PREGUNTAS
        FROM JUEGO J
        INNER JOIN JUEGO_PACIENTE JP ON JP.ID_JUEGO = J.ID_JUEGO
        WHERE JP.ID_PACIENTE = @ID_PACIENTE;

        COMMIT TRANSACTION; 

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
        ROLLBACK TRANSACTION;
    END CATCH
END;
GO


-- SP028: OBTENER PREGUNTAS DE UN JUEGO (JUNTO A SUS OPCIONES)
CREATE OR ALTER PROCEDURE SP_OBTENER_PREGUNTAS
    @ID_JUEGO INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM JUEGO WHERE ID_JUEGO = @ID_JUEGO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50012;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        SELECT 
            P.ID_PREGUNTA,
            P.DESCRIPCION,
            I.BINARIO_FOTO AS IMAGEN_BINARIA,
            (SELECT O.ID_OPCION, O.DESCRIPCION, O.CONDICION
             FROM OPCION O
             WHERE O.ID_PREGUNTA = P.ID_PREGUNTA
             FOR JSON PATH, INCLUDE_NULL_VALUES) AS OPCIONES
        FROM PREGUNTA P
        INNER JOIN IMAGEN I ON P.ID_IMAGEN = I.ID_IMAGEN
        WHERE P.ID_JUEGO = @ID_JUEGO;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP029: ELIMINAR JUEGO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_JUEGO
    @ID_JUEGO INT,
    @ID_CUIDADOR INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM JUEGO WHERE ID_JUEGO = @ID_JUEGO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50012;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM JUEGO WHERE ID_JUEGO = @ID_JUEGO AND ID_USUARIO_CREADOR = @ID_CUIDADOR)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50012;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF EXISTS (SELECT 1 FROM JUEGO_PACIENTE WHERE ID_JUEGO = @ID_JUEGO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50013;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        DELETE FROM OPCION WHERE ID_PREGUNTA IN (SELECT ID_PREGUNTA FROM PREGUNTA WHERE ID_JUEGO = @ID_JUEGO);

        DELETE FROM IMAGEN WHERE ID_IMAGEN IN (SELECT ID_IMAGEN FROM PREGUNTA WHERE ID_JUEGO = @ID_JUEGO);

        DELETE FROM PREGUNTA WHERE ID_JUEGO = @ID_JUEGO;

        DELETE FROM JUEGO WHERE ID_JUEGO = @ID_JUEGO;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP030: OBTENER PUNTAJE (ULTIMOS 20 JUEGOS)
CREATE OR ALTER PROCEDURE SP_OBTENER_PUNTAJE
    @ID_PACIENTE INT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_PACIENTE AND ID_TIPO_USUARIO = 1)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50003;

            RETURN;
        END

        SELECT TOP 20
            P.ID_PUNTAJE,
            P.ID_JUEGO,
            J.NOMBRE AS NOMBRE_JUEGO,
            P.PUNTAJE,
            P.FECHA_HORA
        FROM PUNTAJE P
        INNER JOIN JUEGO J ON P.ID_JUEGO = J.ID_JUEGO
        WHERE P.ID_USUARIO = @ID_PACIENTE
        ORDER BY P.FECHA_HORA DESC;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- MODULO 7 : SESION


-- SP031: INSERTAR SESION (INICIAR NUEVA SESIÓN)
CREATE OR ALTER PROCEDURE SP_INSERTAR_SESION
    @CORREO_ELECTRONICO NVARCHAR(50),
    @PASSWORD NVARCHAR(MAX),
    @ORIGEN NVARCHAR(MAX),
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    DECLARE @ID_USUARIO INT;
    DECLARE @TOKEN NVARCHAR(255);
    DECLARE @FECHA_EXPIRACION DATETIME;

    BEGIN TRY
        BEGIN TRANSACTION;

        SELECT @ID_USUARIO = ID_USUARIO 
        FROM USUARIO 
        WHERE CORREO_ELECTRONICO = @CORREO_ELECTRONICO AND CONTRASENA = @PASSWORD;

        IF @ID_USUARIO IS NULL
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50002;

            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE SESION
        SET FECHA_FINAL = GETDATE()
        WHERE ID_USUARIO = @ID_USUARIO AND FECHA_FINAL IS NULL;

        SET @TOKEN = NEWID(); 
        SET @FECHA_EXPIRACION = DATEADD(DAY, 7, GETDATE());

        INSERT INTO SESION (TOKEN, ID_USUARIO, ORIGEN, FECHA_INICIO, FECHA_EXPIRACION)
        VALUES (@TOKEN, @ID_USUARIO, @ORIGEN, GETDATE(), @FECHA_EXPIRACION);

        SET @ID_RETURN = SCOPE_IDENTITY();

        COMMIT TRANSACTION;

        SELECT 
            U.ID_USUARIO,
            U.NOMBRE,
            U.CORREO_ELECTRONICO,
            U.FECHA_NACIMIENTO,
            U.FOTO_PERFIL,
            U.CODIGO,
            U.DIRECCION,
            U.ID_TIPO_USUARIO,
            @TOKEN AS TOKEN_SESION,
            @FECHA_EXPIRACION AS EXPIRACION
        FROM USUARIO U
        WHERE U.ID_USUARIO = @ID_USUARIO;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP032: CERRAR SESION
CREATE OR ALTER PROCEDURE SP_CERRAR_SESION
    @ID_USUARIO INT,
    @ORIGEN NVARCHAR(MAX),
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = @ID_USUARIO)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50002;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        IF NOT EXISTS (SELECT 1 FROM SESION WHERE ID_USUARIO = @ID_USUARIO AND ORIGEN = @ORIGEN AND FECHA_FINAL IS NULL)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50016;

            SET @ID_RETURN = -1;
            ROLLBACK TRANSACTION;
            RETURN;
        END

        UPDATE SESION
        SET FECHA_FINAL = GETDATE()
        WHERE ID_USUARIO = @ID_USUARIO AND ORIGEN = @ORIGEN AND FECHA_FINAL IS NULL;

        COMMIT TRANSACTION;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO


-- SP033: CONSULTAR SESION ( VERIFICA SI EXISTE UNA SESION ABIERTA PARA ESE TOKEN)
CREATE OR ALTER PROCEDURE SP_CONSULTAR_SESION
    @TOKEN NVARCHAR(MAX),
    @ID_RETURN INT OUTPUT,
    @ERROR_ID INT OUTPUT,
    @ERROR_CODE NVARCHAR(255) OUTPUT,
    @ERROR_DESCRIPTION NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRY
        IF NOT EXISTS (SELECT 1 FROM SESION WHERE TOKEN = @TOKEN)
        BEGIN
            SELECT @ERROR_ID = NUM_ERROR, 
                   @ERROR_CODE = CODE_ERROR, 
                   @ERROR_DESCRIPTION = DESCRIPTION_ERROR
            FROM ERROR_CATALOG 
            WHERE NUM_ERROR = 50016;

            SET @ID_RETURN = -1;
            RETURN;
        END

        SELECT 
            U.ID_USUARIO,
            U.NOMBRE,
            U.CORREO_ELECTRONICO,
            U.FECHA_NACIMIENTO,
            U.FOTO_PERFIL
        FROM USUARIO U
        INNER JOIN SESION S ON S.ID_USUARIO = U.ID_USUARIO
        WHERE S.TOKEN = @TOKEN AND S.FECHA_FINAL IS NULL;

        SET @ERROR_ID = NULL;
        SET @ERROR_CODE = NULL;
        SET @ERROR_DESCRIPTION = NULL;
    END TRY
    BEGIN CATCH
        SET @ID_RETURN = -1;
        SET @ERROR_ID = ERROR_NUMBER();
        SET @ERROR_CODE = 'ERROR_SQL';
        SET @ERROR_DESCRIPTION = ERROR_MESSAGE();
    END CATCH
END;
GO



--LISTA DE ERRORES Y SUS CODIGOS

/*
NUM_ERROR: 50001
CODE_ERROR: CORREO_EN_USO
DESCRIPTION_ERROR: El correo electrónico proporcionado ya está registrado en el sistema. Por favor, utilice otro correo.

NUM_ERROR: 50002
CODE_ERROR: USUARIO_NO_EXISTE
DESCRIPTION_ERROR: El usuario solicitado no existe en el sistema o no es válido.

NUM_ERROR: 50003
CODE_ERROR: PACIENTE_NO_EXISTE
DESCRIPTION_ERROR: El paciente solicitado no existe en el sistema o no es válido.

NUM_ERROR: 50004
CODE_ERROR: CUIDADOR_NO_EXISTE
DESCRIPTION_ERROR: El cuidador solicitado no existe en el sistema o no es válido.

NUM_ERROR: 50005
CODE_ERROR: PACIENTE_NO_ASIGNADO
DESCRIPTION_ERROR: El paciente no está asignado al cuidador especificado.

NUM_ERROR: 50006
CODE_ERROR: PACIENTE_NO_ASOCIADO_EVENTO
DESCRIPTION_ERROR: El paciente no está asociado al evento indicado.

NUM_ERROR: 50007
CODE_ERROR: PING_EN_USO
DESCRIPTION_ERROR: Ya existe un ping activo para este usuario, no se puede generar otro.

NUM_ERROR: 50008
CODE_ERROR: PACIENTE_NO_ASIGNADO
DESCRIPTION_ERROR: El paciente no está asignado al cuidador especificado.

NUM_ERROR: 50009
CODE_ERROR: CODIGO_PACIENTE_NO_EXISTE
DESCRIPTION_ERROR: El código del paciente es incorrecto o no existe en el sistema.

NUM_ERROR: 50010
CODE_ERROR: RELACION_NO_EXISTE
DESCRIPTION_ERROR: No existe una relación válida entre el paciente y el cuidador especificado.

NUM_ERROR: 50011
CODE_ERROR: RELACION_DUPLICADA
DESCRIPTION_ERROR: Ya existe una relación activa entre el paciente y el cuidador especificado.

NUM_ERROR: 50012
CODE_ERROR: JUEGO_NO_EXISTE
DESCRIPTION_ERROR: El juego solicitado no existe en el sistema o no pertenece al usuario.

NUM_ERROR: 50013
CODE_ERROR: JUEGO_NO_ELIMINABLE
DESCRIPTION_ERROR: No se puede eliminar el juego porque tiene pacientes asignados.

NUM_ERROR: 50014
CODE_ERROR: REGISTRO_DUPLICADO
DESCRIPTION_ERROR: Ya existe un registro con la misma información en el sistema.

NUM_ERROR: 50015
CODE_ERROR: EVENTO_NO_EXISTE
DESCRIPTION_ERROR: El evento solicitado no existe en el sistema o no pertenece al usuario.

NUM_ERROR: 50016
CODE_ERROR: PIN_NO_EXISTE
DESCRIPTION_ERROR: No hay un PIN activo para este usuario.

NUM_ERROR: 50017
CODE_ERROR: PIN_FORMATO_INVALIDO
DESCRIPTION_ERROR: El PIN debe contener exactamente 6 dígitos numéricos.

NUM_ERROR: 50018
CODE_ERROR: PIN_INCORRECTO
DESCRIPTION_ERROR: El PIN proporcionado es incorrecto.

NUM_ERROR: 50019
CODE_ERROR: CONTRASENA_INCORRECTA
DESCRIPTION_ERROR: La contraseña actual ingresada es incorrecta.

NUM_ERROR: 50020
CODE_ERROR: CONTRASENA_NO_SEGURA
DESCRIPTION_ERROR: La nueva contraseña no cumple con los requisitos de seguridad establecidos.

NUM_ERROR: 50021
CODE_ERROR: PREGUNTA_NO_EXISTE
DESCRIPTION_ERROR: La pregunta solicitada no existe en el sistema.

NUM_ERROR: 50022
CODE_ERROR: RESPUESTA_DUPLICADA
DESCRIPTION_ERROR: Ya existe una opción marcada como correcta para esta pregunta.

NUM_ERROR: 50023
CODE_ERROR: REGISTRO_NO_ENCONTRADO
DESCRIPTION_ERROR: No se encontró el registro solicitado en la base de datos.

NUM_ERROR: 50024
CODE_ERROR: DATOS_NO_VALIDOS
DESCRIPTION_ERROR: Los datos proporcionados no son válidos o están incompletos.

NUM_ERROR: 50025
CODE_ERROR: SESION_NO_EXISTE
DESCRIPTION_ERROR: No se encontró una sesión activa para el usuario y origen especificado.

NUM_ERROR: 50026
CODE_ERROR: SESION_NO_VALIDA
DESCRIPTION_ERROR: El token de sesión no es válido o ha expirado.

NUM_ERROR: 50027
CODE_ERROR: CREDENCIALES_INCORRECTAS
DESCRIPTION_ERROR: Las credenciales ingresadas son incorrectas.

NUM_ERROR: 50028
CODE_ERROR: SESION_NO_CERRADA
DESCRIPTION_ERROR: No se pudo cerrar la sesión correctamente.

NUM_ERROR: 50029
CODE_ERROR: ERROR_SQL
DESCRIPTION_ERROR: Se ha producido un error inesperado en la base de datos.

NUM_ERROR: 50030
CODE_ERROR: SESION_YA_EXISTE
DESCRIPTION_ERROR: El usuario ya tiene una sesión activa en el sistema.
*/
